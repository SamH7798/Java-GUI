/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.samsjavagui;

import javax.swing.JOptionPane;

/**
 *
 * @author samhi
 */
public class LogIn extends javax.swing.JFrame {

    /**
     * Creates new form LogIn
     */
    public LogIn() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        UserName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        Password = new javax.swing.JTextField();
        Access = new javax.swing.JToggleButton();
        closeButton = new javax.swing.JToggleButton();
        CreateAccount = new javax.swing.JToggleButton();
        UserType = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("UserName");

        jLabel2.setText("Password");

        Access.setText("Access Account");
        Access.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AccessActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        CreateAccount.setText("Create Account");
        CreateAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateAccountActionPerformed(evt);
            }
        });

        UserType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Employee", "Supervisor" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Access, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(CreateAccount)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(UserType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Password, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                            .addComponent(UserName))))
                .addContainerGap(119, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(UserType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(Access)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CreateAccount)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton)
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
       this.setVisible(false); // closes the window
       this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void CreateAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateAccountActionPerformed
        new CreateAccount().setVisible(true); // moves to create account page
        this.dispose();
    }//GEN-LAST:event_CreateAccountActionPerformed

    private void AccessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AccessActionPerformed
       //sees if there is a valid username
        if(DataBase.Users.containsKey(UserName.getText()) == false){
        JOptionPane.showMessageDialog(this, "Please type in a valid username");
       
        }
        
        String enteredUsername = UserName.getText();
        String enteredPassword = Password.getText(); 
        String actualPassword = DataBase.Users.get(UserName.getText());
        String enteredRole = UserType.getSelectedItem().toString();
        String actualRole = "";
        if (!actualPassword.equals(enteredPassword)){
         //JOptionPane.showMessageDialog(this, "Real Password: " + actualPassword +  " != " +"Password Entered: "+ enteredPassword );
         JOptionPane.showMessageDialog(this, "Password Incorrect");
        
        }
        // if username and password is in the databse and correct
        // the role is checked to see if the employee has access to it
        else{
     
    
                // gets the current role of the employee logging in if it is not an employee then the supervisors are checked 
                //gets the actual role by username since username for everyone is unique
               for(int i = 0;i < DataBase.Employees.size(); ++i){
                   if(enteredUsername.equals(DataBase.Employees.get(i).getUsername())){
                       //JOptionPane.showMessageDialog(this, "Employee copied");
                       actualRole = DataBase.Employees.get(i).getRole(); // gets the actual role of the employee incase entered wrong
                       LogInSession.loggedInEmployee = DataBase.Employees.get(i); // sets the logged in employee
                       break;
                    }
                }
               
               for(int i = 0; i < DataBase.Supervisors.size(); ++i){
                   if(enteredUsername.equals(DataBase.Supervisors.get(i).getUserName())){
                       actualRole = DataBase.Supervisors.get(i).getRole();
                       LogInSession.loggedInSupervisor = DataBase.Supervisors.get(i);
                       
                       break;
                   }
               }
              
               if(actualRole.equals("Employee")){
            //JOptionPane.showMessageDialog(this, "Testing"); 
                   if(enteredRole.equals(actualRole)){
                      //JOptionPane.showMessageDialog(this, "Testing"); 
                      new EmployeePage().setVisible(true);
                      this.dispose();
                }
                   else  { // if the employee tries accessing the supervisor page
                       JOptionPane.showMessageDialog(this, "You Do Not Have Access To Supervisor Page!");
                }
            }
               else if(actualRole.equals("Supervisor")){
                   
                  // JOptionPane.showMessageDialog(this, "actual role is supervisor");
                   
                if(enteredRole.equals(actualRole)){ // successful supervisor loggin
                    //JOptionPane.showMessageDialog(this, "Successful Login");
                    new SupervisorPage().setVisible(true);
                    this.dispose();
                }
                else{
                    // a supervisor cannot access an employee page
                    JOptionPane.showMessageDialog(this, "You Do Not Have Access To Employee Page!");
                }
               }
      
        }
        /*
        else{
         String userType = UserType.getSelectedItem().toString();
         if(userType.equals("Employee")){
           JOptionPane.showMessageDialog(this, "Employee Login");
         }
         else if(userType.equals("Supervisor")){
            JOptionPane.showMessageDialog(this, "Supervisor Login");
            }
        }
        */
        // JOptionPane.showMessageDialog(this, "Successful login");
        
        
    }//GEN-LAST:event_AccessActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LogIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
// a test user
        DataBase.insertUser("Sam1", "password");
        DataBase.Employees.add(new Employee("Samuel", "Hill", // adds the new employee to the database
                "Sam1", "password", "1F3", "Employee"));
        // adding clients to the test employee
        DataBase.Employees.get(0).addClient("14A7", "Fred Johnson");
         DataBase.Employees.get(0).addClient("99Jk", "Stan Smith");
          DataBase.Employees.get(0).addClient("667FG", "Randy Marsh");
          
           //adds new supervisor to database
          DataBase.insertUser("Ian1","password1");  
          DataBase.Supervisors.add(new Supervisor("Ian","Saho","Ian1","password1","2EY","Supervisor" )); 
          for(int i= 0; i < DataBase.Employees.size(); ++i){
                 DataBase.Supervisors.get(0).addEmployee(DataBase.Employees.get(i));    //adds supervised Employess to test supervisor page   
    }
          
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LogIn().setVisible(true);
            }
        });
        
        
    }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton Access;
    private javax.swing.JToggleButton CreateAccount;
    private javax.swing.JTextField Password;
    private javax.swing.JTextField UserName;
    private javax.swing.JComboBox<String> UserType;
    private javax.swing.JToggleButton closeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
